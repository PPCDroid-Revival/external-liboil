<!-- ##### SECTION Title ##### -->
Other Function Classes

<!-- ##### SECTION Short_Description ##### -->
Other Function Classes

<!-- ##### SECTION Long_Description ##### -->
<para>
Functions operate on arrays of data.  The arrays can be either source
arrays (input only), destination arrays (output only), or in-place
arrays (both input and output).
</para>

<para>
The interpretation of a parameter can usually be determined from its
name.  Parameters for arrays are of the form d1_1xn, where the first
character represents the direction (source, destination, or in-place),
the second represents the index for that particular direction, and
the characters after the underscore indicate the size of the array.
In this case, "1xn" represents an array that is 1 by N.  Note that
the index and the size can both be omitted, giving a default of 1
for the index and 1xn for the size.
</para>

<para>
Parameters that represent strides are of the form "d1s".  The
interpretation is similar to above, except that the s indicates
a stride parameter.
</para>

<para>
The exceptions to the above rule are "dest", "src", "dstr", "sstr", etc.
These are aliases for "d1", "s1", "d1s", and "s1s", respectively.  This
form is deprecated and will be removed in the 0.4 series.
</para>

<para>
Two special parameters are "n" and "m", which determine the size of
the arrays in other parameters.
</para>

<para>
Data arrays are laid out such that rows are separated by the number
of bytes given by the corresponding stride.  Elements in each row
are contiguous.  If there is no stride parameter corresponding to an
array, the rows of the array are contiguous.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### FUNCTION oil_clip_f32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_f64 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_s16 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_s32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_s8 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_u16 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_u32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum


<!-- ##### FUNCTION oil_clip_u8 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum


<!-- ##### FUNCTION oil_dequantize8x8_s16 ##### -->
<para>

Multiplies each value in first source array with corresponding value
in second source array, and places result in destination array.  This
function would be more appropriately called oil_mult8x8_s16().
</para>

@d_8x8: 
@dstr: 
@s1_8x8: 
@sstr1: 
@s2_8x8: 
@sstr2: 


<!-- ##### FUNCTION oil_diffsquaresum_f64 ##### -->
<para>

Subtracts each value in first source array with corresponding value
in second source array, squares the result, and then sums the results
over the entire array, placing the result in the destination.
</para>

@d_1: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_md5 ##### -->
<para>

Convolves the MD5 checksum using the given source data.  The complete
algorithm for calculating MD5 checksums requires additional preparation
of the data.  See the example in the examples/md5 directory in the
source tree.
</para>

@i_4: 
@s_16: 


<!-- ##### FUNCTION oil_mix_u8 ##### -->
<para>

</para>

@dest: 
@src1: 
@src2: 
@src3: 
@n: 


<!-- ##### FUNCTION oil_null ##### -->
<para>

Does nothing, and does it surprisingly fast.
</para>



<!-- ##### FUNCTION oil_scanlinescale2_u8 ##### -->
<para>

</para>

@dest: 
@src: 
@n: 


<!-- ##### FUNCTION oil_sincos_f64 ##### -->
<para>

</para>

@dest1: 
@dest2: 
@n: 
@s1_1: 
@s2_1: 


<!-- ##### FUNCTION oil_utf8_validate ##### -->
<para>

Checks the source array for valid UTF-8 characters.  Processing stops
once an invalid character is found.  The number of bytes containing
valid UTF-8 characters is placed in the destination.
</para>

@d_1: 
@s: 
@n: 


<!-- ##### FUNCTION oil_diff8x8_s16_u8 ##### -->
<para>

</para>

@d_64: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_diff8x8_average_s16_u8 ##### -->
<para>

</para>

@d_64: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 
@s3_8x8: 
@ss3: 


<!-- ##### FUNCTION oil_err_inter8x8_u8_avg ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@s3_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_recon8x8_inter ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s1_8x8: 
@ss1: 
@s2_8x8: 


<!-- ##### FUNCTION oil_err_intra8x8_u8 ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@ss1: 


<!-- ##### FUNCTION oil_recon8x8_intra ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s_8x8: 


<!-- ##### FUNCTION oil_colsad8x8_u8 ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_composite_over_u8 ##### -->
<para>

</para>

@i_n: 
@s1_n: 
@n: 


<!-- ##### FUNCTION oil_diff8x8_const128_s16_u8 ##### -->
<para>

</para>

@d_64: 
@s1_8x8: 
@ss1: 


<!-- ##### FUNCTION oil_copy8x8_u8 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 


<!-- ##### FUNCTION oil_err_inter8x8_u8 ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_fdct8x8theora ##### -->
<para>

</para>

@s_8x8: 
@d_8x8: 


<!-- ##### FUNCTION oil_rowsad8x8_u8 ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@s2_8x8: 


<!-- ##### FUNCTION oil_recon8x8_inter2 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 
@s3_8x8: 


<!-- ##### FUNCTION oil_composite_add_u8 ##### -->
<para>

</para>

@i_n: 
@s1_n: 
@n: 


<!-- ##### FUNCTION oil_sad8x8_u8_avg ##### -->
<para>

</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@s3_8x8: 
@ss2: 


