<!-- ##### SECTION Title ##### -->
Function Classes

<!-- ##### SECTION Short_Description ##### -->
Function Classes

<!-- ##### SECTION Long_Description ##### -->
<para>
Functions operate on arrays of data.  The arrays can be either source
arrays (input only), destination arrays (output only), or in-place
arrays (both input and output).
</para>

<para>
The interpretation of a parameter can usually be determined from its
name.  Parameters for arrays are of the form d1_1xn, where the first
character represents the direction (source, destination, or in-place),
the second represents the index for that particular direction, and
the characters after the underscore indicate the size of the array.
In this case, "1xn" represents an array that is 1 by N.  Note that
the index and the size can both be omitted, giving a default of 1
for the index and 1xn for the size.
</para>

<para>
Parameters that represent strides are of the form "d1s".  The
interpretation is similar to above, except that the s indicates
a stride parameter.
</para>

<para>
The exceptions to the above rule are "dest", "src", "dstr", "sstr", etc.
These are aliases for "d1", "s1", "d1s", and "s1s", respectively.  This
form is deprecated and will be removed in the 0.4 series.
</para>

<para>
Two special parameters are "n" and "m", which determine the size of
the arrays in other parameters.
</para>

<para>
Data arrays are laid out such that rows are separated by the number
of bytes given by the corresponding stride.  Elements in each row
are contiguous.  If there is no stride parameter corresponding to an
array, the rows of the array are contiguous.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### FUNCTION oil_abs_f32_f32 ##### -->
<para>
Calculates the absolute value of each element.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_abs_f64_f64 ##### -->
<para>
Calculates the absolute value of each element.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 




<!-- ##### FUNCTION oil_abs_u16_s16 ##### -->
<para>

Calculates the absolute value of each element.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_abs_u32_s32 ##### -->
<para>

Calculates the absolute value of each element.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_abs_u8_s8 ##### -->
<para>

Calculates the absolute value of each element.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_argb_paint_u8 ##### -->
<para>

</para>

@i_4xn: 
@s1_4: 
@s2_n: 
@n: 


<!-- ##### FUNCTION oil_average2_u8 ##### -->
<para>

Calculates the average of each element in the source arrays.
</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 



<!-- ##### FUNCTION oil_ayuv2argb_u8 ##### -->
<para>

Converts an array of AYUV pixels to ARGB.
</para>

@d_4xn: 
@s_4xn: 
@n: 



<!-- ##### FUNCTION oil_clip_f32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_f64 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_s16 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minumum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_s32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_s8 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_u16 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_u32 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum



<!-- ##### FUNCTION oil_clip_u8 ##### -->
<para>

Clips each element in the first source array.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 
@s2_1: minimum
@s3_1: maximum



<!-- ##### FUNCTION oil_clipconv8x8_u8_s16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_clipconv_s16_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s16_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s16_s32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s16_u16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s16_u32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s32_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s32_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s32_u32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_s16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_s32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_u16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_u32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_s8_u8 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u16_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u16_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u16_s16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u16_s32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u16_u32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u32_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u32_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u32_s32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_f32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_f64 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_s16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_s32 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_s8 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_u16 ##### -->
<para>

Converts source array to type of destination array, clipping values
to the range of the destination type.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_clipconv_u8_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv8x8_f64_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_conv8x8_s16_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_conv_f32_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f32_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_f64_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s16_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s32_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_s8_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u16_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u32_u8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_f32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_f64 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_s16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_s32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_s8 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_u16 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_conv_u8_u32 ##### -->
<para>

Converts each element in the source array to the type of destination
array.  Destination values outside the range of the destination type
are unspecified.
</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_copy_u8 ##### -->
<para>

Copies the source array to the destination array with no modification.
This function is identical to memcpy().
</para>

@dest: 
@src: 
@n: 



<!-- ##### FUNCTION oil_dct36_f32 ##### -->
<para>

</para>

@d_36: 
@dstr: 
@s_36: 
@sstr: 


<!-- ##### FUNCTION oil_dequantize8x8_s16 ##### -->
<para>

Multiplies each value in first source array with corresponding value
in second source array, and places result in destination array.  This
function would be more appropriately called oil_mult8x8_s16().
</para>

@d_8x8: 
@dstr: 
@s1_8x8: 
@sstr1: 
@s2_8x8: 
@sstr2: 



<!-- ##### FUNCTION oil_diffsquaresum_f64 ##### -->
<para>

Subtracts each value in first source array with corresponding value
in second source array, squares the result, and then sums the results
over the entire array, placing the result in the destination.
</para>

@d_1: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 



<!-- ##### FUNCTION oil_fdct8_f64 ##### -->
<para>

Calculates the forward discrete cosine transform on the source array.
</para>

@d_8: 
@s_8: 
@dstr: 
@sstr: 



<!-- ##### FUNCTION oil_fdct8x8_f64 ##### -->
<para>

Calculates the 2-D forward discrete cosine transform on the source array.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_fdct8x8s_s16 ##### -->
<para>

Calculates the 2-D forward discrete cosine transform on the source array,
multiplying some values in the destination array by values interesting
to the algorithm.  This function is not recommended.
</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 



<!-- ##### FUNCTION oil_idct8_f64 ##### -->
<para>

Calculates the inverse discrete cosine transform on the source array.
</para>

@d_8: 
@dstr: 
@s_8: 
@sstr: 



<!-- ##### FUNCTION oil_idct8x8_f64 ##### -->
<para>

Calculates the 2-D inverse discrete cosine transform on the source array.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_idct8x8_s16 ##### -->
<para>

Calculates the 2-D inverse discrete cosine transform on the source array,
multiplying some values in the destination array by values interesting
to the algorithm.  This function is not recommended.
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_imdct12_f64 ##### -->
<para>

Calculate the inverse modified discrete cosine transform of the source
array.  This function is interesting in mp3 decoding.
</para>

@d_12: 
@s_6: 



<!-- ##### FUNCTION oil_imdct32_f32 ##### -->
<para>

Calculate the inverse modified discrete cosine transform of the source
array.  This function is interesting in mp3 decoding.
</para>

@d_32: 
@s_32: 



<!-- ##### FUNCTION oil_imdct36_f64 ##### -->
<para>

Calculate the inverse modified discrete cosine transform of the source
array.  This function is interesting in mp3 decoding.
</para>

@d_36: 
@s_18: 



<!-- ##### FUNCTION oil_md5 ##### -->
<para>

Convolves the MD5 checksum using the given source data.  The complete
algorithm for calculating MD5 checksums requires additional preparation
of the data.  See the example in the examples/md5 directory in the
source tree.
</para>

@i_4: 
@s_16: 



<!-- ##### FUNCTION oil_mdct12_f64 ##### -->
<para>

Calculates the modified discrete cosine transform of the source array.
</para>

@d_6: 
@s_12: 



<!-- ##### FUNCTION oil_mdct36_f64 ##### -->
<para>

Calculates the modified discrete cosine transform of the source array.
</para>

@d_18: 
@s_36: 



<!-- ##### FUNCTION oil_mix_u8 ##### -->
<para>

</para>

@dest: 
@src1: 
@src2: 
@src3: 
@n: 


<!-- ##### FUNCTION oil_mult8x8_s16 ##### -->
<para>

</para>

@d_8x8: 
@s1_8x8: 
@s2_8x8: 
@ds: 
@ss1: 
@ss2: 


<!-- ##### FUNCTION oil_multsum_f32 ##### -->
<para>

</para>

@dest: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_multsum_f64 ##### -->
<para>

</para>

@dest: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_null ##### -->
<para>

Does nothing, and does it surprisingly fast.
</para>




<!-- ##### FUNCTION oil_permute_f32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_f64 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_s16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_s32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_s8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_u16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_u32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_permute_u8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 


<!-- ##### FUNCTION oil_rgb2bgr ##### -->
<para>

</para>

@d_3xn: 
@s_3xn: 
@n: 


<!-- ##### FUNCTION oil_rgb2rgba ##### -->
<para>

</para>

@d_4xn: 
@s_3xn: 
@n: 


<!-- ##### FUNCTION oil_sad8x8_f64 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_sad8x8_s16 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 


<!-- ##### FUNCTION oil_scalaradd_f32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_f64 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_s16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_s32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_s8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_u16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_u32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalaradd_u8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_f32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_f64 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_s16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_s32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_s8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_u16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_u32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scalarmult_u8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src: 
@sstr: 
@s2_1: 
@n: 


<!-- ##### FUNCTION oil_scanlinescale2_u8 ##### -->
<para>

</para>

@dest: 
@src: 
@n: 


<!-- ##### FUNCTION oil_sincos_f64 ##### -->
<para>

</para>

@dest1: 
@dest2: 
@n: 
@s1_1: 
@s2_1: 


<!-- ##### FUNCTION oil_splat_u32 ##### -->
<para>

Copies the value in the source array to each element in the destination
array.
</para>

@dest: 
@dstr: 
@s1_1: 
@n: 



<!-- ##### FUNCTION oil_splat_u8 ##### -->
<para>

Copies the value in the source array to each element in the destination
array.
</para>

@dest: 
@dstr: 
@s1_1: 
@n: 



<!-- ##### FUNCTION oil_squaresum_f64 ##### -->
<para>

</para>

@dest: 
@src: 
@n: 


<!-- ##### FUNCTION oil_sum_f64 ##### -->
<para>

Sums each element in the source array and places the result in
the destination array.
</para>

@dest: 
@src: 
@sstr: 
@n: 



<!-- ##### FUNCTION oil_tablelookup_u8 ##### -->
<para>

</para>

@d: 
@ds: 
@s1: 
@ss1: 
@s2_256: 
@ss2: 
@n: 


<!-- ##### FUNCTION oil_trans8x8_f64 ##### -->
<para>

Transposes the source array.
</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 



<!-- ##### FUNCTION oil_trans8x8_u16 ##### -->
<para>

Transposes the source array.
</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 



<!-- ##### FUNCTION oil_trans8x8_u32 ##### -->
<para>

Transposes the source array.
</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 



<!-- ##### FUNCTION oil_trans8x8_u8 ##### -->
<para>

Transposes the source array.
</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 



<!-- ##### FUNCTION oil_unzigzag8x8_s16 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 


<!-- ##### FUNCTION oil_utf8_validate ##### -->
<para>

Checks the source array for valid UTF-8 characters.  Processing stops
once an invalid character is found.  The number of bytes containing
valid UTF-8 characters is placed in the destination.
</para>

@d_1: 
@s: 
@n: 



<!-- ##### FUNCTION oil_vectoradd_f32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_f64 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_s16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_s32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_s8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_u16 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_u32 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_vectoradd_u8 ##### -->
<para>

</para>

@dest: 
@dstr: 
@src1: 
@sstr1: 
@src2: 
@sstr2: 
@n: 
@s3_1: 
@s4_1: 


<!-- ##### FUNCTION oil_yuv2rgbx_sub2_u8 ##### -->
<para>

</para>

@d_4xn: 
@src1: 
@src2: 
@src3: 
@n: 


<!-- ##### FUNCTION oil_yuv2rgbx_sub4_u8 ##### -->
<para>

</para>

@d_4xn: 
@src1: 
@src2: 
@src3: 
@n: 


<!-- ##### FUNCTION oil_yuv2rgbx_u8 ##### -->
<para>

</para>

@d_4xn: 
@src1: 
@src2: 
@src3: 
@n: 


<!-- ##### FUNCTION oil_zigzag8x8_s16 ##### -->
<para>

</para>

@d_8x8: 
@ds: 
@s_8x8: 
@ss: 


<!-- ##### FUNCTION oil_idct8theora_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@d_8: 
@dstr: 
@s_8: 
@sstr: 



<!-- ##### FUNCTION oil_idct8x8lim10_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_idct8x8lim10_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_idct8x8theora_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@d_8x8: 
@dstr: 
@s_8x8: 
@sstr: 



<!-- ##### FUNCTION oil_sad8x8_f64_2 ##### -->
<para>
Requires version 0.3.2
</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 



<!-- ##### FUNCTION oil_sad8x8_s16_2 ##### -->
<para>
Requires version 0.3.2
</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 



<!-- ##### FUNCTION oil_sad8x8_u8 ##### -->
<para>
Requires version 0.3.2
</para>

@d_1: 
@s1_8x8: 
@ss1: 
@s2_8x8: 
@ss2: 



<!-- ##### FUNCTION oil_scaleconv_f32_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f32_s32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f32_s8 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f32_u16 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f32_u32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f32_u8 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_s32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_s8 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_u16 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_u32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_f64_u8 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s16_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s16_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s32_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s32_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s8_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_s8_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u16_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u16_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u32_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u32_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u8_f32 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_scaleconv_u8_f64 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@src: 
@n: 
@s2_1: 
@s3_1: 



<!-- ##### FUNCTION oil_splat_u32_ns ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@s1_1: 
@n: 



<!-- ##### FUNCTION oil_splat_u8_ns ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@s1_1: 
@n: 



<!-- ##### MACRO oil_trans8x8_s16 ##### -->
<para>
Requires version 0.3.2
</para>

@dest: 
@dstr: 
@src: 
@sstr: 



